apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "apache-nifi.fullname" . }}
  labels:
    app: {{ include "apache-nifi.name" . | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  podManagementPolicy: {{ .Values.sts.podManagementPolicy }}
  serviceName: {{ template "apache-nifi.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apache-nifi.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
      labels:
        app: {{ include "apache-nifi.name" . | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
    spec:
      {{- if eq .Values.sts.AntiAffinity "hard"}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "apache-nifi.name" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      {{- else if eq .Values.sts.AntiAffinity "soft"}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "component"
                        operator: In
                        values:
                         - {{ include "apache-nifi.name" . | quote }}
                 topologyKey: "kubernetes.io/hostname"
      {{- end}}
{{- if .Values.securityContext }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
{{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
      - name: server
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag}}"
        command:
        - bash
        - -ce
        - |
          prop_replace () {
            target_file=${NIFI_HOME}/conf/nifi.properties
            echo 'replacing target file ' ${target_file}
            sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
          }

          FQDN=$(hostname -f)
          HOST=$(hostname)

          cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"
          cat "${NIFI_HOME}/conf/authorizers.temp" > "${NIFI_HOME}/conf/authorizers.xml"

          if [ $HOST == ${HOST_INFO}"-0" ];then
              echo "This is the nifi-0"
              cp /tmp/cert/nifi-0/*.jks /opt/nifi/nifi-current/conf/
              keyPassword=$(cat /tmp/cert/nifi-0/config.json  | grep keyPassword | awk -F '"' '{print $4}')
              trustPassword=$(cat /tmp/cert/nifi-0/config.json  | grep trustStorePassword | awk -F '"' '{print $4}')
              prop_replace nifi.security.keystorePasswd ${keyPassword}
              prop_replace nifi.security.keyPasswd ${keyPassword}
              prop_replace nifi.security.truststorePasswd ${trustPassword}
              prop_replace nifi.web.https.host ${HOST}
              prop_replace nifi.cluster.node.address ${FQDN}
              prop_replace nifi.web.https.host ${FQDN}
   
              echo "Begin to create kafka pid file"
              mkdir -p /opt/nifi/data/zookeeper/ && echo "0">/opt/nifi/data/zookeeper/myid
          elif [ $HOST == ${HOST_INFO}"-1" ];then
              echo "This is the nifi-1"
              cp /tmp/cert/nifi-1/*.jks /opt/nifi/nifi-current/conf/
              keyPassword=$(cat /tmp/cert/nifi-1/config.json  | grep keyPassword | awk -F '"' '{print $4}')
              trustPassword=$(cat /tmp/cert/nifi-1/config.json  | grep trustStorePassword | awk -F '"' '{print $4}')
              prop_replace nifi.security.keystorePasswd ${keyPassword}
              prop_replace nifi.security.keyPasswd ${keyPassword}
              prop_replace nifi.security.truststorePasswd ${trustPassword}
              prop_replace nifi.web.https.host ${HOST}
              prop_replace nifi.cluster.node.address ${FQDN}
              prop_replace nifi.web.https.host ${FQDN}
              mkdir -p /opt/nifi/data/zookeeper/ && echo "1">/opt/nifi/data/zookeeper/myid
          elif [ $HOST == ${HOST_INFO}"-2" ];then
              echo "This is the nifi-2" 
              cp /tmp/cert/nifi-2/*.jks /opt/nifi/nifi-current/conf/
              keyPassword=$(cat /tmp/cert/nifi-2/config.json  | grep keyPassword | awk -F '"' '{print $4}')
              trustPassword=$(cat /tmp/cert/nifi-2/config.json  | grep trustStorePassword | awk -F '"' '{print $4}')
              prop_replace nifi.security.keystorePasswd ${keyPassword}
              prop_replace nifi.security.keyPasswd ${keyPassword}
              prop_replace nifi.security.truststorePasswd ${trustPassword}
              prop_replace nifi.web.https.host ${HOST}
              prop_replace nifi.cluster.node.address ${FQDN}
              prop_replace nifi.web.https.host ${FQDN}
              mkdir -p /opt/nifi/data/zookeeper/ && echo "2">/opt/nifi/data/zookeeper/myid
          else
              echo "Please check the hostname info or replicount"
              exit 1
          fi

          prop_replace nifi.zookeeper.connect.string ${NIFI_ZOOKEEPER_CONNECT_STRING}

          exec bin/nifi.sh run
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
{{- if .Values.properties.httpsPort }}
        - containerPort: {{ .Values.properties.httpsPort }}
{{- if .Values.sts.hostPort }}
          hostPort: {{ .Values.sts.hostPort }}
{{- end }}
          name: https
          protocol: TCP
{{- end }}
{{- if .Values.properties.httpPort }}
        - containerPort: {{ .Values.properties.httpPort }}
          name: http
          protocol: TCP
{{- end }}
        - containerPort: {{ .Values.properties.clusterPort }}
          name: cluster
          protocol: TCP
        - containerPort: {{ .Values.properties.cachePort }}
          name: cache
          protocol: TCP
        env:
        - name: NIFI_ZOOKEEPER_CONNECT_STRING
          value: {{ template "embed.zookeeper" . }}
        - name: HOST_INFO
          value: {{ .Release.Name }}
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -c
              - |
                $NIFI_HOME/bin/nifi.sh stop
{{- if .Values.postStart }}
          postStart:
            exec:
              command: ["/bin/sh", "-c", {{ .Values.postStart | quote }}]
{{- end }}
        volumeMounts:
          - name: "nifi-data"
            mountPath: /opt/nifi/data
            subPath: data
          - name: "nifi-data"
            mountPath: /opt/nifi/flowfile_repository
            subPath: flowfile_repository
          - name: "nifi-data"
            mountPath: /opt/nifi/content_repository
            subPath: content_repository
          - name: "nifi-data"
            mountPath: /opt/nifi/provenance_repository
            subPath: provenance_repository
          - name: "nifi-logs"
            mountPath: /opt/nifi/nifi-current/logs
            subPath: logs
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-temp"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
            subPath: "authorizers.temp"
          - name: "authorizers-empty"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.empty
            subPath: "authorizers.empty"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "logback-xml"
            mountPath: /opt/nifi/nifi-current/conf/logback.xml
            subPath: "logback.xml"
          - name: "login-identity-providers-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers.xml
            subPath: "login-identity-providers.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
      - name: app-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/logs/nifi-app.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: "nifi-logs"
          mountPath: /var/log
      - name: bootstrap-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/logs/nifi-bootstrap.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: "nifi-logs"
          mountPath: /var/log
      - name: user-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/logs/nifi-user.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: "nifi-logs"
          mountPath: /var/log
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-temp"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.temp"
      - name: "authorizers-empty"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers-empty.xml"
              path: "authorizers.empty"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "logback-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "logback.xml"
              path: "logback.xml"
      - name: "login-identity-providers-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "login-identity-providers.xml"
              path: "login-identity-providers.xml"
      - name: "state-management-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "zookeeper-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: nifi-data
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.dataStorage.size }}
    - metadata:
        name: nifi-logs
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.logStorage.size }}
{{- end }}
